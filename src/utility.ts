// export function loadobject(urlObj:URL): Document[] {
//   const file = fs.readFileSync(urlObj.hostname + ".json", "utf-8");
//   const jsonData :{
//     [key: string]: string
//   } = JSON.parse(file);
//   const docs = Object.entries(jsonData).map(([key, value]) => {
//     return new Document({
//       pageContent: value,
//       metadata: { source: key },
//     })
//   });
//   return docs;
// }





// async function getQueries(query:string) {
// const systemPrompt = ``
//   const model = ai.getGenerativeModel({
//   model: "gemini-2.0-flash",
//   generationConfig: {
//     temperature: 1.5,
//     responseMimeType: "application/json",
//   },
//   systemInstruction: {
//     role: "system",
//     parts: [{ text: systemPrompt }],
//   }
// });
//   const {response} = await model.generateContent({
//   contents: [{ role: "user", parts: [{ text: query }] }],
// });
//   const final = response.text().trim();
// }
// //this will be queries of array generated by getQueries
// async function getSourcesFromQueries(queries:string) {
//   const collections = await qdrantClient.getCollections();
//   const names = collections.collections.map((name) => name.name);
//   const systemPrompt = `You are an expert ai in predecting the collection name from the given collection name in qdrant for qdrant from query  
//   Collections: ${names}
//   Rules:
//   - give one word answer
//   - if any query can have 2 collection name then also choose any one
//   Example: Query: What is html?
//           You : html
//           Query : what are joins in sql?
//           You : sql
//           Query : what is nginix?
//           You : devops 
//   `
//   const model = ai.getGenerativeModel({
//   model: "gemini-2.0-flash",
//   generationConfig: {
//     temperature: 1.5,
//     responseMimeType: "application/json",
//   },
//   systemInstruction: {
//     role: "system",
//     parts: [{ text: systemPrompt }],
//   }
// });
//   const {response} = await model.generateContent({
//   contents: [{ role: "user", parts: [{ text: queries }] }],
// });
//   const final = response.text().trim();



//   const ret = new QdrantVectorStore(embeddings, {
//     url: 'http://localhost:6333', collectionName: final,
//   })
//   const fetch = await ret.similaritySearch(queries);
//   const sources = fetch.map((doc) => doc.metadata.source);
//   const filterunique = sources.filter((url, index, self) => self.indexOf(url) == index).slice(0, 3);
//   return filterunique;
  
// }
// async function getdatafromsources(sources:string[]) {
//   const browser = await chromium.launch();
//   const page = await browser.newPage();
//   const context = [];
//   for (let source of sources) {
//     await page.goto(source, { waitUntil: "domcontentloaded" });
//     const content = await page.$eval("body", e => e.innerText);
//     const cleanedText = content.replace(/\n+/g, ' ');
//     context.push(cleanedText);
//   }
//   await browser.close();
//   return context;
// }
// async function ask(query:string) {
//   const queries = getQueries(query);
//   const sources = await getSourcesFromQueries(query);
//   const context = await getdatafromsources(sources);
//   const systemPrompt = `You are a helpful assistant that can answer questions from the provided context and give mid-long answers in structured way with emojies implementation and short analogies and remember to add sources in bulletpoint
//     Context: ${context} Sources: ${sources}
//     Note: if there is no context or sources then say "Your query doesn't match with the context of this chat ask something else ðŸ˜…" and dont give any answer
//     Example:
//     Me- What is Html?
//     You- HTML stands for HyperText Markup Language. It's basically the building blocks of any website. It tells your browser how to display things like text, images, headings, and links on a webpage. You donâ€™t need to be an expert to start building websites. Learning the basicsâ€”like how to create a page layout, add text, images, and linksâ€”can be done in a weekend. Once you get those down, youâ€™re good to go.
//         HTML5 is the latest version of HTML. It brings new features and improvements, including:
//         New semantic elements: <header>, <footer>, <section>, <article>
//         Built-in support for audio, video, and graphics:
//         <audio>, <video>, <canvas>
//         Improved form controls: <input type="date">, <input type="range">
//         ðŸ§ª HTML5 Example:
//         html
//         Copy
//         Edit
//         <article>
//           <header>
//             <h2>Learning HTML5</h2>
//           </header>
//           <p>HTML5 makes web development simpler and more powerful.</p>
//           <video controls>
//             <source src="demo.mp4" type="video/mp4">
//             Your browser does not support the video tag.
//           </video>
//         </article>
//         ðŸ“˜ How Much HTML Do You Need to Learn?
//         You only need the basics to get started. Focus on these key elements:
//         Structure: <html>, <head>, <body>
//         Content: <h1> to <h6>, <p>, <a>, <img>
//         Lists: <ul>, <ol>, <li>
//         Forms: <form>, <input>, <button>
//         With just these, you can create your first real web page!
        
//         Sources: 
//           - https://chaidocs.vercel.app/youtube/chai-aur-html/introduction/
//           - https://chaidocs.vercel.app/youtube/chai-aur-html/html-tags/
//     `
//   const model = ai.getGenerativeModel({
//   model: "gemini-2.0-flash",
//   generationConfig: {
//     temperature: 1.5,
//     responseMimeType: "application/json",
//   },
//   systemInstruction: {
//     role: "system",
//     parts: [{ text: systemPrompt }],
//   }
// });
//   const {response} = await model.generateContent({
//   contents: [{ role: "user", parts: [{ text: query }] }],
// });
//   const final = response.text;
//   console.log(final);
// }